AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation template to deploy a VPC with inbound traffic inspection. This
  version uses one EIP per firewall by translating based on port number.
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: String
  AmazonLinuxAMI:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
Mappings:
  VyosRegionMap:
    us-east-1:
      VyosAMI: ami-80b683fb
    us-west-1:
      VyosAMI: ami-e583a885
  LinuxRegionMap:
    us-east-1:
      LinuxAMI: ami-0ff82839cd27c0730
    us-west-1:
      LinuxAMI: ami-0bf4c20bc0118f30c
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/20
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ingress-inspection"
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ingress-inspection"
  IgwAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref IGW
  PublicSubnetAZa:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-public-subnet1"
      VpcId: !Ref VPC
      AvailabilityZone: !Sub ${AWS::Region}a
      MapPublicIpOnLaunch: true
      CidrBlock: 10.0.0.0/24
  PublicSubnetAZb:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-public-subnet1"
      VpcId: !Ref VPC
      AvailabilityZone: !Sub ${AWS::Region}b
      MapPublicIpOnLaunch: true
      CidrBlock: 10.0.1.0/24
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-public"
  InternetAccessDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - IGW
      - IgwAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
  PublicRouteTableAssociationAZa:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetAZa
      RouteTableId: !Ref PublicRouteTable
  PublicRouteTableAssociationAZb:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetAZb
      RouteTableId: !Ref PublicRouteTable
  PublicRouteTableAssociationAZb:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetAZb
      RouteTableId: !Ref PublicRouteTable
  PermitAllSG:
    Type: "AWS::EC2::SecurityGroup"
    Description: SG to permit all traffic
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ingress-inspection-permit-all"
      GroupName: !Sub "${AWS::StackName}-ingress-inspection-permit-all"
      GroupDescription: Allow all traffic
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
  PublicENIAZa:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: ENI for Router Outside Interface
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ingress-inspection"
      SourceDestCheck: "false"
      GroupSet:
        - !Ref PermitAllSG
        - !GetAtt VPC.DefaultSecurityGroup
      SubnetId: !Ref PublicSubnetAZa
      PrivateIpAddresses:
        - Primary: "true"
          PrivateIpAddress: 10.0.0.10
        - Primary: "false"
          PrivateIpAddress: 10.0.0.20  
  PublicENIAZb:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: ENI for Router Outside Interface
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ingress-inspection"
      SourceDestCheck: "false"
      GroupSet:
        - !Ref PermitAllSG
        - !GetAtt VPC.DefaultSecurityGroup
      SubnetId: !Ref PublicSubnetAZb
      PrivateIpAddresses:
        - Primary: "true"
          PrivateIpAddress: 10.0.1.10
        - Primary: "false"
          PrivateIpAddress: 10.0.1.20  
  PrivateENIAZa:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: ENI for Router Inside Interface
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ingress-inspection"
      SourceDestCheck: false
      PrivateIpAddress: 10.0.5.10
      GroupSet:
        - !Ref PermitAllSG
        - !GetAtt VPC.DefaultSecurityGroup
      SubnetId: !Ref PrivateSubnetAZa
  PrivateENIAZb:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: ENI for Router Inside Interface
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ingress-inspection"
      SourceDestCheck: false
      PrivateIpAddress: 10.0.6.10
      GroupSet:
        - !Ref PermitAllSG
        - !GetAtt VPC.DefaultSecurityGroup
      SubnetId: !Ref PrivateSubnetAZb
  Fw1Eip:
    Type: AWS::EC2::EIP
    Properties: 
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "Fw1Eip1Eip-${AWS::StackName}"
  Fw2Eip:
    Type: AWS::EC2::EIP
    Properties: 
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "Fw2Eip2Eip-${AWS::StackName}"
  AssociateFw1Eip:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt Fw1Eip.AllocationId
      NetworkInterfaceId: !Ref PublicENIAZa
      PrivateIpAddress: 10.0.0.10
  AssociateFw2Eip:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt Fw2Eip.AllocationId
      NetworkInterfaceId: !Ref PublicENIAZb
      PrivateIpAddress: 10.0.1.10
  RouterInstanceAZa:
    Type: "AWS::EC2::Instance"
    DependsOn: [ AssociateFw1Eip ]
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-VyOS-AZa"
      KeyName: !Ref KeyName
      ImageId: !FindInMap [VyosRegionMap, !Ref "AWS::Region", VyosAMI]
      InstanceType: t2.micro
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref PublicENIAZa
          DeviceIndex: 0
        - NetworkInterfaceId: !Ref PrivateENIAZa
          DeviceIndex: 1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/vbash
          source /opt/vyatta/etc/functions/script-template
          set system host-name ingress-a
          delete interfaces ethernet eth0 address dhcp 
          set interfaces ethernet eth0 address 10.0.0.10/24
          set interfaces ethernet eth0 address 10.0.0.20/24
          set interfaces ethernet eth1 address 10.0.5.10/24
          set nat destination rule 100 description 'DNAT FOR APP1'
          set nat destination rule 100 destination port '8080'
          set nat destination rule 100 inbound-interface 'eth0'
          set nat destination rule 100 protocol 'tcp'
          set nat destination rule 100 translation address '10.0.5.100'
          set nat destination rule 100 translation port '80'
          set nat destination rule 200 description 'DNAT FOR APP2'
          set nat destination rule 200 destination port '8081'
          set nat destination rule 200 inbound-interface 'eth0'
          set nat destination rule 200 protocol 'tcp'
          set nat destination rule 200 translation address '10.0.5.200'
          set nat destination rule 200 translation port '80'
          set nat source rule 100 outbound-interface 'eth1'
          set nat source rule 100 source address '0.0.0.0/0'
          set nat source rule 100 translation address 'masquerade'
          set protocols static route 0.0.0.0/0 next-hop 10.0.0.1
          set protocols static route 10.0.6.0/24 next-hop '10.0.5.1'
          commit
          save
          exit
  RouterInstanceAZb:
    Type: "AWS::EC2::Instance"
    DependsOn: [ AssociateFw2Eip ]
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-VyOS-AZb"
      KeyName: !Ref KeyName
      ImageId: !FindInMap [VyosRegionMap, !Ref "AWS::Region", VyosAMI]
      InstanceType: t2.micro
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref PublicENIAZb
          DeviceIndex: 0
        - NetworkInterfaceId: !Ref PrivateENIAZb
          DeviceIndex: 1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/vbash
          source /opt/vyatta/etc/functions/script-template
          set system host-name ingress-b
          delete interfaces ethernet eth0 address dhcp 
          set interfaces ethernet eth0 address 10.0.1.10/24
          set interfaces ethernet eth0 address 10.0.1.20/24
          set interfaces ethernet eth1 address 10.0.6.10/24
          set nat destination rule 100 description 'DNAT FOR APP1'
          set nat destination rule 100 destination port '8080'
          set nat destination rule 100 inbound-interface 'eth0'
          set nat destination rule 100 protocol 'tcp'
          set nat destination rule 100 translation address '10.0.6.100'
          set nat destination rule 100 translation port '80'
          set nat destination rule 200 description 'DNAT FOR APP2'
          set nat destination rule 200 destination port '8081'
          set nat destination rule 200 inbound-interface 'eth0'
          set nat destination rule 200 protocol 'tcp'
          set nat destination rule 200 translation address '10.0.6.200'
          set nat destination rule 200 translation port '80'
          set nat source rule 100 outbound-interface 'eth1'
          set nat source rule 100 source address '0.0.0.0/0'
          set nat source rule 100 translation address 'masquerade'
          set protocols static route 0.0.0.0/0 next-hop 10.0.1.1
          set protocols static route 10.0.5.0/24 next-hop '10.0.6.1'
          commit
          save
          exit
  PrivateRouteTableAZa:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-private-AZa"
  PrivateRouteTableAZb:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-private-AZb"
  PrivateSubnetAZa:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-private-AZa"
      VpcId: !Ref VPC
      AvailabilityZone: !Sub ${AWS::Region}a
      MapPublicIpOnLaunch: false
      CidrBlock: 10.0.5.0/24
  PrivateSubnetAZb:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-private-AZb"
      VpcId: !Ref VPC
      AvailabilityZone: !Sub ${AWS::Region}b
      MapPublicIpOnLaunch: false
      CidrBlock: 10.0.6.0/24
  PrivateRouteTableAssociationAZa:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetAZa
      RouteTableId: !Ref PrivateRouteTableAZa
  PrivateRouteTableAssociationAZb:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetAZb
      RouteTableId: !Ref PrivateRouteTableAZb
  S3EndpointAZa:
    Type: "AWS::EC2::VPCEndpoint"
    Description: S3 endpoint for downloading Amazon Linux 2 packages
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      VpcEndpointType: "Gateway"
      VpcId: !Ref VPC
      RouteTableIds: [!Ref PrivateRouteTableAZa]
  S3EndpointAZb:
    Type: "AWS::EC2::VPCEndpoint"
    Description: S3 endpoint for downloading Amazon Linux 2 packages
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      VpcEndpointType: "Gateway"
      VpcId: !Ref VPC
      RouteTableIds: [!Ref PrivateRouteTableAZb]
  App1AzA:
    Type: "AWS::EC2::Instance"
    DependsOn: [ S3EndpointAZa ]
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-App1AzA"
      KeyName: !Ref KeyName
      ImageId: !Ref AmazonLinuxAMI
      InstanceType: t3.nano
      NetworkInterfaces: 
      - DeviceIndex: 0
        GroupSet: [ !GetAtt VPC.DefaultSecurityGroup ]
        SubnetId: !Ref PrivateSubnetAZa
        PrivateIpAddress: 10.0.5.100
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          usermod -a -G apache ec2-user
          chown -R ec2-user:apache /var/www
          chmod 2775 /var/www
          find /var/www -type d -exec chmod 2775 {} \;
          find /var/www -type f -exec chmod 0664 {} \;
          echo "App1AzA" > /var/www/html/index.html
          echo `hostname` >> /var/www/html/index.html
          echo '<br><br>' >> /var/www/html/index.html
          base64 /dev/urandom | head -c 10000 >> /var/www/html/index.html
  App1AzB:
    Type: "AWS::EC2::Instance"
    DependsOn: [ S3EndpointAZb ]
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-App1AzB"
      KeyName: !Ref KeyName
      ImageId: !Ref AmazonLinuxAMI
      InstanceType: t3.nano
      NetworkInterfaces: 
      - DeviceIndex: 0
        GroupSet: [ !GetAtt VPC.DefaultSecurityGroup ]
        SubnetId: !Ref PrivateSubnetAZb
        PrivateIpAddress: 10.0.6.100
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          usermod -a -G apache ec2-user
          chown -R ec2-user:apache /var/www
          chmod 2775 /var/www
          find /var/www -type d -exec chmod 2775 {} \;
          find /var/www -type f -exec chmod 0664 {} \;
          echo "App1AzB" > /var/www/html/index.html
          echo `hostname` >> /var/www/html/index.html
          echo '<br><br>' >> /var/www/html/index.html
          base64 /dev/urandom | head -c 10000 >> /var/www/html/index.html
  App2AzA:
    Type: "AWS::EC2::Instance"
    DependsOn: [ S3EndpointAZa ]
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-App2AzA"
      KeyName: !Ref KeyName
      ImageId: !Ref AmazonLinuxAMI
      InstanceType: t3.nano
      NetworkInterfaces: 
      - DeviceIndex: 0
        GroupSet: [ !GetAtt VPC.DefaultSecurityGroup ]
        SubnetId: !Ref PrivateSubnetAZa
        PrivateIpAddress: 10.0.5.200
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          usermod -a -G apache ec2-user
          chown -R ec2-user:apache /var/www
          chmod 2775 /var/www
          find /var/www -type d -exec chmod 2775 {} \;
          find /var/www -type f -exec chmod 0664 {} \;
          echo "App2AzA" > /var/www/html/index.html
          echo `hostname` >> /var/www/html/index.html
          echo '<br><br>' >> /var/www/html/index.html
          base64 /dev/urandom | head -c 10000 >> /var/www/html/index.html
  App2AzB:
    Type: "AWS::EC2::Instance"
    DependsOn: [ S3EndpointAZb ]
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-App2AzB"
      KeyName: !Ref KeyName
      ImageId: !Ref AmazonLinuxAMI
      InstanceType: t3.nano
      NetworkInterfaces: 
      - DeviceIndex: 0
        GroupSet: [ !GetAtt VPC.DefaultSecurityGroup ]
        SubnetId: !Ref PrivateSubnetAZb
        PrivateIpAddress: 10.0.6.200
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          usermod -a -G apache ec2-user
          chown -R ec2-user:apache /var/www
          chmod 2775 /var/www
          find /var/www -type d -exec chmod 2775 {} \;
          find /var/www -type f -exec chmod 0664 {} \;
          echo "App1AzB" > /var/www/html/index.html
          echo `hostname` >> /var/www/html/index.html
          echo '<br><br>' >> /var/www/html/index.html
          base64 /dev/urandom | head -c 10000 >> /var/www/html/index.html
Outputs:
  App1Fw1EipUrlOutput:
    Description: APP1 FW1 URL
    Value: !Join [ '', [ 'http://', !Ref Fw1Eip, '8080'] ]
  App2Fw1EipUrlOutput:
    Description: APP2 FW1 URL
    Value: !Join [ '', [ 'http://', !Ref Fw1Eip, '8081'] ]
  App1Fw2EipUrlOutput:
    Description: APP1 FW2 URL
    Value: !Join [ '', [ 'http://', !Ref Fw2Eip, '8080'] ]
  App2Fw2EipUrlOutput:
    Description: APP2 FW2 URL
    Value: !Join [ '', [ 'http://', !Ref Fw2Eip, '8081'] ]



